# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∫–ª–∞—Å—É Teacher (–±–µ–∑ –∑–º—ñ–Ω)
class Teacher:
    def __init__(self, first_name, last_name, age, email, can_teach_subjects):
        self.first_name = first_name
        self.last_name = last_name
        self.age = age
        self.email = email
        self.can_teach_subjects = set(can_teach_subjects)
        self.assigned_subjects = set()

    def __repr__(self):
        return f"Teacher({self.first_name},{self.last_name}, {self.age} —Ä–æ–∫—ñ–≤, Skills: {self.can_teach_subjects})"


def create_schedule(subjects, teachers):

    remaining_subjects = subjects.copy()
    available_teachers = list(teachers)

    schedule_list = []

    # –¶–∏–∫–ª –ø—Ä–æ–¥–æ–≤–∂—É—î—Ç—å—Å—è, –ø–æ–∫–∏ —î –ø—Ä–µ–¥–º–µ—Ç–∏, —è–∫—ñ —Ç—Ä–µ–±–∞ –ø–æ–∫—Ä–∏—Ç–∏, –Ü —î –¥–æ—Å—Ç—É–ø–Ω—ñ –≤—á–∏—Ç–µ–ª—ñ.
    while len(remaining_subjects) > 0 and len(available_teachers) > 0:

        teacher_raiting_list = []

        for teacher in available_teachers:
            current_coverage_set = remaining_subjects.intersection(
                teacher.can_teach_subjects
            )
            current_coverage_len = len(current_coverage_set)

            # –î–æ–¥–∞—î–º–æ –¥–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ª–∏—à–µ —Ç–∏—Ö, —Ö—Ç–æ –º–æ–∂–µ –ø–æ–∫—Ä–∏—Ç–∏ —â–æ—Å—å –Ω–æ–≤–µ
            if current_coverage_len > 0:
                teacher_raiting_list.append(
                    (
                        teacher,
                        current_coverage_len,
                        teacher.age,
                        current_coverage_set,
                    )
                )

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–µ–º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –ø–æ–∫—Ä–∏—Ç—Ç—è
        if not teacher_raiting_list:
            break

        sorted_best_teacher = sorted(
            teacher_raiting_list,
            key=lambda item: (
                -item[1],
                item[2],
            ),
        )

        # –í–∏–±—ñ—Ä —Ç–∞ –ü—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è
        best_teacher = sorted_best_teacher[0][0]
        subjects_to_assign = sorted_best_teacher[0][3]

        best_teacher.assigned_subjects.update(subjects_to_assign)
        schedule_list.append(best_teacher)

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É (–ñ–∞–¥—ñ–±–Ω–∏–π –∫—Ä–æ–∫)
        remaining_subjects.difference_update(subjects_to_assign)
        available_teachers.remove(best_teacher)

    print(f"\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∏–∫–æ–Ω–∞–Ω–Ω—è ---")

    # –í–∏–≤–µ–¥–µ–Ω–Ω—è –∑–∞–ª–∏—à–∫–æ–≤–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤
    if remaining_subjects:
        print(f"‚ö†Ô∏è {len(remaining_subjects)} –ø—Ä–µ–¥–º–µ—Ç(—ñ–≤) –∑–∞–ª–∏—à–∏–ª–∏—Å—è –±–µ–∑ –≤–∏–∫–ª–∞–¥–∞—á–∞:")
        for subject in remaining_subjects:
            print(f"    - {subject}")

    if available_teachers:
        print(f"üë§ {len(available_teachers)} –≤–∏–∫–ª–∞–¥–∞—á(—ñ–≤) –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π:")
        for teacher in available_teachers:
            print(f"    - {teacher.first_name} {teacher.last_name}")

    return schedule_list


if __name__ == "__main__":
    # –ú–Ω–æ–∂–∏–Ω–∞ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
    subjects_initial = {"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§—ñ–∑–∏–∫–∞", "–•—ñ–º—ñ—è", "–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ë—ñ–æ–ª–æ–≥—ñ—è"}

    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤
    teachers_initial = [
        Teacher(
            first_name="–û–ª–µ–∫—Å–∞–Ω–¥—Ä",
            last_name="–Ü–≤–∞–Ω–µ–Ω–∫–æ",
            age=45,
            email="o.ivanenko@example.com",
            can_teach_subjects={"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–§—ñ–∑–∏–∫–∞"},
        ),
        Teacher(
            first_name="–ú–∞—Ä—ñ—è",
            last_name="–ü–µ—Ç—Ä–µ–Ω–∫–æ",
            age=38,
            email="m.petrenko@example.com",
            can_teach_subjects={"–•—ñ–º—ñ—è"},
        ),
        Teacher(
            first_name="–°–µ—Ä–≥—ñ–π",
            last_name="–ö–æ–≤–∞–ª–µ–Ω–∫–æ",
            age=50,
            email="s.kovalenko@example.com",
            can_teach_subjects={"–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"},
        ),
        Teacher(
            first_name="–ù–∞—Ç–∞–ª—ñ—è",
            last_name="–®–µ–≤—á–µ–Ω–∫–æ",
            age=29,
            email="n.shevchenko@example.com",
            can_teach_subjects={"–ë—ñ–æ–ª–æ–≥—ñ—è", "–•—ñ–º—ñ—è"},
        ),
        Teacher(
            first_name="–î–º–∏—Ç—Ä–æ",
            last_name="–ë–æ–Ω–¥–∞—Ä–µ–Ω–∫–æ",
            age=35,
            email="d.bondarenko@example.com",
            can_teach_subjects={"–§—ñ–∑–∏–∫–∞", "–Ü–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"},
        ),
        Teacher(
            first_name="–û–ª–µ–Ω–∞",
            last_name="–ì—Ä–∏—Ü–µ–Ω–∫–æ",
            age=42,
            email="o.grytsenko@example.com",
            can_teach_subjects={"–ë—ñ–æ–ª–æ–≥—ñ—è"},
        ),
    ]

    # –í–∏–∫–ª–∏–∫ —Ñ—É–Ω–∫—Ü—ñ—ó —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É
    schedule = create_schedule(subjects_initial, teachers_initial)

    # –í–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É
    if schedule:
        print("\n--- ‚úÖ –§—ñ–Ω–∞–ª—å–Ω–∏–π –†–æ–∑–∫–ª–∞–¥ –ó–∞–Ω—è—Ç—å ---")
        for teacher in schedule:
            print(
                f"{teacher.first_name} {teacher.last_name}, {teacher.age} —Ä–æ–∫—ñ–≤, email: {teacher.email}"
            )
            print(f" ¬† –í–∏–∫–ª–∞–¥–∞—î –ø—Ä–µ–¥–º–µ—Ç–∏: {', '.join(teacher.assigned_subjects)}\n")
    else:
        print("\n–ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–∫—Ä–∏—Ç–∏ –≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏ –Ω–∞—è–≤–Ω–∏–º–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞–º–∏.")
